package advancedProgrammingSystem;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class StudentsPerformanceDataProcessor implements ProcessTextFiles {
    private static List<StudentPerformanceFile> studentPerformanceList = new ArrayList<>();

    @Override
    public void readFile() throws IOException {
        File nyFile = new File("C:\\Users\\user\\Desktop\\rama\\advancedProgrammingSystem\\Student_Performance_Data");
        Scanner input = new Scanner(nyFile);

        // Skip the header line
        if (input.hasNextLine()) {
            input.nextLine();
        }

        while (input.hasNextLine()) {
            String line = input.nextLine();
            String[] sections = line.split("\\|");
            if (sections.length == 5) {
                String studentId = sections[0];
                String semesterName = sections[1];
                String paperId = sections[2];
                String paperName = sections[3];
                int marks = Integer.parseInt(sections[4]);

                StudentPerformanceFile performance = new StudentPerformanceFile(studentId, semesterName, paperId, paperName, marks);
                studentPerformanceList.add(performance);
            }
        }

        input.close();
    }
    
    public List<StudentPerformanceFile> getStudentPerformanceList() {
        return studentPerformanceList;
    }
    
    public static List<StudentPerformanceFile> getPerformanceByStudentID(String studentID) {
        List<StudentPerformanceFile> performances = new ArrayList<>();
        for (StudentPerformanceFile performance : studentPerformanceList) {
            if (performance.getStudentId().equals(studentID)) {
                performances.add(performance);
            }
        }
        if (performances.isEmpty()) {
            throw new IllegalArgumentException("Performance for student with ID " + studentID + " not found.");
        }
        return performances;
    }

    
 // Method to calculate the number of papers for a specific student
    public static int numberOfPapers( String studentId) {
        int count = 0;
        for (StudentPerformanceFile performance : studentPerformanceList) {
            if (performance.getStudentId().equals(studentId)) {
                count++;
            }
        }
        return count;
    }

    // Method to calculate the number of semesters for a specific student
    public static int numberOfSemesters( String studentId) {
        int count = 0;
        for (StudentPerformanceFile performance : studentPerformanceList) {
            if (performance.getStudentId().equals(studentId)) {
                count++;
            }
        }
        return count;
    }

    // Method to calculate the average marks for a specific student
    public static double averageMarks(String studentId) {
        int sum = 0;
        int count = 0;
        for (StudentPerformanceFile performance : studentPerformanceList) {
            if (performance.getStudentId().equals(studentId)) {
                sum += performance.getMarks();
                count++;
            }
        }
        if (count == 0) {
            return 0.0;
        }
        return (double) sum / count;
    }

    // Method to calculate the sum of marks for a specific student
    public static int sumOfMarks( String studentId) {
        int sum = 0;
        for (StudentPerformanceFile performance : studentPerformanceList) {
            if (performance.getStudentId().equals(studentId)) {
                sum += performance.getMarks();
            }
        }
        return sum;
    }

    // Method to find the maximum marks for a specific student
    public static int maxMarks(String studentId) {
        int max = Integer.MIN_VALUE;
        for (StudentPerformanceFile performance : studentPerformanceList) {
            if (performance.getStudentId().equals(studentId) && performance.getMarks() > max) {
                max = performance.getMarks();
            }
        }
        return max == Integer.MIN_VALUE ? 0 : max;
    }

    // Method to find the minimum marks for a specific student
    public static int minMarks(String studentId) {
        int min = Integer.MAX_VALUE;
        for (StudentPerformanceFile performance : studentPerformanceList) {
            if (performance.getStudentId().equals(studentId) && performance.getMarks() < min) {
                min = performance.getMarks();
            }
        }
        return min == Integer.MAX_VALUE ? 0 : min;
    }

  

}

